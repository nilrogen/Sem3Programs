Michael Gorlin
mgorlin@cs.uml.edu (can you send my last assignments grade too?)
Degree of Success: 80%
91.515 Assignment 2


My program implements event counters and sequencers using pthread mutex 
primitives. My program was tested on both on mercury and on a Ubuntu Linux
virtual machine with 2 CPU cores and 384 MB of RAM. 

I had a surprising amount of trouble with this program. Mostly because when
I was initially running it, I was using a large queue size and a small number
of items consumed per thread. When I scaled up my values to sizes needed to 
test (200 dozen items/thread and a queue size of 200), my entire program fell
apart. Turns out that my implementation of the problem was completely 
incorrect. Primarily I was not calling await on the other type of threads 
event counter. 

My implementation now works, which required a full day of fixing my code. 
I've created a python script that tests a full set of output for correctness.
Which while slow, does show that each consumer consumes four unique monotonic
sequences of integers.

My implementation is far slower then I feel it should be. Compared to my 
undergrad implementation of this program using just pthread mutex and 
condition variables, my program runs maybe 3x slower. I'm pretty sure
It can be optimized in some way, I just don't know how or care to do it
now. 

TEST RESULTS:

My tests were run for 100 dozen only. As stated before my implementation
is slow. For 200 dozen I was seeing times of >20 seconds. Waiting for that
40 seconds per loop and visibly using a lot of compute time on mercury 
was undesirable. Ten minutes per test was much longer then I had time for. 


Test 1's -- the time to complete 10 tests of 100 dozen at 500 queue depth --
data can be found in the appropriately named files. 

Average for process scope:  5.2628
Average for system scope:  11.0054


Test 2's data can be found in a table in the directory. The results are pretty
linear looking. My 50% mark for system scope was about 500 queue depth. For
process scope it was maybe 350 queue depth. 

HOW TO RUN AND TEST MY PROGRAM:

The main program supports 3 arguments in the form (-t -f or -tf)

The arguments are:

-t : creates or appends to a timing file in the working dir.

-f : creates a full set of output data for consumers in the fulloutput/
	 directory. After you can run test.py to test correctness. 

-p : produces the required output for the program 


The A2_... Program has 2 additional arguments the name of the program
to run and the arguments (if any) to that program.

